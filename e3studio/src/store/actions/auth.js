// WE are going to define the methods that will take place upon receiving those actions
import * as actionTypes from './actionTypes';
import axios from 'axios';



export const authStart = () => {
    return {
        type: actionTypes.AUTH_START// when working with actions, the object that we need to return always have to include a type.
    };
}

export const authSuccess = (token, course) => {
    return {
        type: actionTypes.AUTH_SUCCESS,
        token: token,
        course: course,
    };
}

export const authFail = error => {
    return {
        type: actionTypes.AUTH_FAIL,
        error: error
    };
}


export const authLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('course');
    localStorage.removeItem('expirationDate');
    // clearInterval(this.intervalId);
    return {
        type: actionTypes.AUTH_LOGOUT
    };

}

export const setUrl = thisurl => {
    localStorage.setItem('thisurl', thisurl);
    return {
        type: actionTypes.SET_URL,
        thisurl: thisurl
    };
}


const checkAuthTimeout = expirationTime => {
    return dispatch => {
        setTimeout(() => {
            dispatch(authLogout());
        }, expirationTime * 1000)
    };
}

// const loginRedirect = () => {
//     setTimeout(()=> {
//         window.location.href = "/"
//     }, 20000)
// }

export const authLogin = (username, password) => {
    // it takes in two paramters: username and password, and returns a dispatch
    // this will essentially return the dispatch of authStart method, which
    // tells us the authStart has started.
    // Then it goes into the API and looks for databases
    return dispatch => {
        dispatch(authStart());
        axios.post(`/user/registration/login/`, {
            username: username,
            password: password
        })
            .then(res => {
                // it will return a key generated by Django API and
                // assigned to the user
                const token = res.data.key;
                const expirationDate = new Date(new Date().getTime() + 3600 * 3000); // this is 3 hours
                localStorage.setItem('token', token);
                dispatch(authSuccess(token, null));
                axios.get(`/userprofile/api/profiles/${token}/`)
                    .then(res1 => {
                        localStorage.setItem('course', res1.data.subject);
                        dispatch(authSuccess(token, res1.data.subject));
                    });
                localStorage.setItem('expirationDate', expirationDate);
                dispatch(checkAuthTimeout(10800));
            })
            .catch(error => {
                dispatch(authFail(error.response.data));
            })
    };
}


export const authSignup = (username, email, password1, password2) => {
    // it takes in two paramters: username and password, and returns a dispatch
    // this will essentially return the dispatch of authStart method, which
    // tells us the authStart has started.
    // Then it goes into the API and looks for databases
    return dispatch => {
        dispatch(authStart());
        axios.post(`/user/registration/signup/`, {
            username: username,
            email: email,
            password1: password1,
            password2: password2,
        })
            .then(res => {
                // it will return a key generated by Django API and
                // assigned to the user
                const token = res.data.key;
                const expirationDate = new Date(new Date().getTime() + 3600 * 1000); // this is one hour
                localStorage.setItem('token', token);
                localStorage.setItem('expirationDate', expirationDate);
                // dispatch(authSuccess(token));
                // dispatch(checkAuthTimeout(3600));
                window.location.href = "/registration/email-verification-sent";
            })
            .catch(error => {
                dispatch(authFail(error.response.data.password1));
            })
    };
}


// check if the token is stored in our localStorage,
// if not, we then logout; otherwise, we have to re-evaluate
// the expirationDate
export const authCheckState = () => {
    return dispatch => {
        const token = localStorage.getItem('token');
        const course = localStorage.getItem('course');
        if (token === undefined) {
            dispatch(authLogout());
        } else {
            const expirationDate = new Date(localStorage.getItem('expirationDate'));
            if (expirationDate <= new Date()) {
                dispatch(authLogout());
            } else {
                dispatch(authSuccess(token, course));
                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));
            }
        }

    }
}
