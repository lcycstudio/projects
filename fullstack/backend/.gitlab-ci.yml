# **************************************************************************
# Build the Django backend into a Docker image, push to AWS ECR, and
# redeploy the Fargate cluster/service which will uses the latest ECR image
# that we just built.
# **************************************************************************

variables:
  # All Environments
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  SERVER_ECR: $SERVER_ECR
  # Staging
  SERVER_STAGING_ECR_REPO_URL: $SERVER_STAGING_ECR_REPO_URL
  SERVER_STAGING_ECS_CLUSTER: $SERVER_STAGING_ECS_CLUSTER
  SERVER_STAGING_ECS_SERVICE: $SERVER_STAGING_ECS_SERVICE
  # Live
  SERVER_LIVE_ECR_REPO_URL: $SERVER_LIVE_ECR_REPO_URL
  SERVER_LIVE_ECS_CLUSTER: $SERVER_LIVE_ECS_CLUSTER
  SERVER_LIVE_ECS_SERVICE: $SERVER_LIVE_ECS_SERVICE

stages:
  - build_push
  - deploy

# TODO - can we merge the _staging & _live copies into one with variables?

# *************************************
# Staging
# *************************************
build_push_staging:
  stage: build_push
  image: "docker:latest"
  services:
    - docker:dind
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    # Using AWS CLI v2 Docker image because can't on install the CLI on Alpine
    # without a lot of hassles which is what docker:latest is using.
    - docker run --rm --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY amazon/aws-cli ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $SERVER_ECR
    - cd ./service
    - docker build -t "$SERVER_STAGING_ECR_REPO_URL:latest" .
    - docker push "$SERVER_STAGING_ECR_REPO_URL:latest"
  environment:
    name: staging
  only:
    - staging

deploy_staging:
  stage: deploy
  image: "debian:buster-slim"
  before_script:
    - apt-get update -qq && apt-get install -y -qq curl jq unzip
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
  script:
    - aws ecs update-service --cluster $SERVER_STAGING_ECS_CLUSTER --service $SERVER_STAGING_ECS_SERVICE --force-new-deployment
  dependencies:
    - build_push_staging
  environment:
    name: staging
  only:
    - staging

# *************************************
# Live
# *************************************
build_push_live:
  stage: build_push
  image: "docker:latest"
  services:
    - docker:dind
  script:
    - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
    - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
    # Using AWS CLI v2 Docker image because can't on install the CLI on Alpine
    # without a lot of hassles which is what docker:latest is using.
    - docker run --rm --env AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY amazon/aws-cli ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $SERVER_ECR
    - cd ./service
    - docker build -t "$SERVER_LIVE_ECR_REPO_URL:latest" .
    - docker push "$SERVER_LIVE_ECR_REPO_URL:latest"
  environment:
    name: live
  only:
    - master

deploy_live:
  stage: deploy
  image: "debian:buster-slim"
  before_script:
    - apt-get update -qq && apt-get install -y -qq curl jq unzip
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
  script:
    - aws ecs update-service --cluster $SERVER_LIVE_ECS_CLUSTER --service $SERVER_LIVE_ECS_SERVICE --force-new-deployment
  dependencies:
    - build_push_live
  environment:
    name: live
  only:
    - master
